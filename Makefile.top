all:

# To be filled in by included makefiles
TARGETS =
BINARIES =
DOCS =

ifndef LANG_MODE
	LANG_MODE := c
endif
ifeq ($(LANG_MODE),c)
	COMPILER := CC
	FLAGS := C
	STANDARD := gnu99
endif
ifeq ($(LANG_MODE),cpp)
	COMPILER := CXX
	FLAGS := CXX
	STANDARD := gnu++11
endif
# Build compiler flags
ifdef RELEASE
	CFLAGS += -O2 -ggdb2
else
	CFLAGS += -ggdb3 -O0 -DDEBUG
endif
ifeq ($(TARGET),mips)
	CC = mips-softfloat-linux-uclibc-gcc
endif
ifdef VERBOSE
	Q=
	M=@\#
else
	Q=@
	M=@echo " "
endif
ifndef PLUGIN_PATH
	PLUGIN_PATH := lib
endif
CFLAGS_ALL += $(CFLAGS) --std=$(STANDARD) -pedantic -Wall -Wextra -fno-omit-frame-pointer -DOUTPUT_DIRECTORY=\"$(abspath $(O))\" -DSOURCE_DIRECTORY=\"$(abspath $(S))\" -DPAGE_SIZE=$(PAGE_SIZE) -DPREFIX=$(abspath $(O)) -DMAX_LOG_LEVEL=$(MAX_LOG_LEVEL) -DPLUGIN_PATH=\"$(PLUGIN_PATH)\" $(addprefix -D,$(EXTRA_DEFINES))
CXXFLAGS_ALL += $(CXXFLAGS) $(CFLAGS) --std=$(STANDARD) -pedantic -Wall -Wextra -fno-omit-frame-pointer -DOUTPUT_DIRECTORY=\"$(abspath $(O))\" -DSOURCE_DIRECTORY=\"$(abspath $(S))\" -DPAGE_SIZE=$(PAGE_SIZE) -DPREFIX=$(abspath $(O)) -DMAX_LOG_LEVEL=$(MAX_LOG_LEVEL) -DPLUGIN_PATH=\"$(PLUGIN_PATH)\" $(addprefix -D,$(EXTRA_DEFINES))
LDFLAGS_ALL += $(LDFLAGS)
ifdef COV
CFLAGS_ALL += -fprofile-arcs -ftest-coverage -DCOVERAGE
CXXFLAGS_ALL += -fprofile-arcs -ftest-coverage -DCOVERAGE
LDFLAGS_ALL += -fprofile-arcs
endif

ifdef STATIC
	STATIC_LOCAL := 1
	STATIC_SYSTEM := 1
endif
ifdef STATIC_LOCAL
	CFLAGS_ALL += -static -DSTATIC
	CXXFLAGS_ALL += -static -DSTATIC
endif
ifdef STATIC_SYSTEM
	LDFLAGS_ALL += -static
endif
CFLAGS += $(addprefix -I,$(EXTRA_INCLUDES))
CXXFLAGS += $(addprefix -I,$(EXTRA_INCLUDES))
LDFLAGS += $(addprefix -L,$(EXTRA_LIBDIRS))
ifeq ($(ENABLE_PYTHON), 1)
	CFLAGS_ALL += $(shell python2.7-config --includes)
	CXXFLAGS_ALL += $(shell python2.7-config --includes)
endif
ifeq ($(LUA_COMPILE),1)
	CFLAGS_ALL += -DLUA_COMPILE
	CXXFLAGS_ALL += -DLUA_COMPILE
endif

# Magic to track dependencies on header files. They are stored in the .d files
# by the compiler, then we load them on the next run and use them.
DEP_FILES := $(shell if test -d $(O)/.deps ; then find $(O)/.deps -name '*.d' ; fi | sort)
include $(DEP_FILES)

# Stuff to generate dependencies and link commands from the target_SOMETHING variables.
ifdef STATIC_LOCAL
LIB_SUFFIX :=.a
else
LIB_SUFFIX :=.so
endif

define COMMON_REGISTER

$(1): $$(patsubst %,$(O)/.objs/$(3)%.o,$$($(2)_MODULES) $$($(2)_MODULES_3RDPARTY))
$(1): CFLAGS_ALL += $$($(2)_CFLAGS) $$(foreach CONFIG,$$($(2)_PKG_CONFIGS),$$(shell pkg-config --cflags $$(CONFIG))) $$(foreach CONFIG,$$($(2)_EXE_CONFIGS),$$(shell $$(CONFIG)-config --cflags))
$(1): CXXFLAGS_ALL += $$($(2)_CXXFLAGS) $$(foreach CONFIG,$$($(2)_PKG_CONFIGS),$$(shell pkg-config --cflags $$(CONFIG))) $$(foreach CONFIG,$$($(2)_EXE_CONFIGS),$$(shell $$(CONFIG)-config --cflags))
$(1): LDFLAGS_ALL += $$($(2)_LDFLAGS) $$(foreach CONFIG,$$($(2)_PKG_CONFIGS),$$(shell pkg-config --libs $$(CONFIG))) $$(foreach CONFIG,$$($(2)_EXE_CONFIGS),$$(shell $$(CONFIG)-config --libs))
ifdef STATIC_GLOBAL
# TODO: The system libraries?
else
$(1): LINK_LIBRARIES += $$(addprefix -l,$$($(2)_SYSTEM_LIBS))
$(1): LINK_SO_LIBRARIES += $$(addprefix -l,$$($(2)_SO_LIBS))
endif
ifdef STATIC_LOCAL
$(1): LINK_LIBRARIES += $$(patsubst %,$(O)/lib/lib%.a,$$($(2)_LOCAL_LIBS))
$(1): $$(patsubst %,$(O)/lib/lib%.a,$$($(2)_LOCAL_LIBS))
else
$(1): LINK_LIBRARIES += -L$(O)/lib -Wl,-R$(abspath $(O)/lib) $$(addprefix -l,$$($(2)_LOCAL_LIBS))
$(1): $$(patsubst %,$(O)/lib/lib%.so,$$($(2)_LOCAL_LIBS))
endif

cppcheck-$$(notdir $$(basename $(1))): $$(patsubst %,$(S)/$(3)%.$(LANG_MODE),$$(filter-out %.embed,$$($(2)_MODULES)))

endef

# Function to register a binary to TARGETS and generate the rules to build it.
# It shall be called as:
#
# binary_name_MODULES := main other_file third_file
# $(eval $(call REGISTER_BIN,binary_name,src/path/to/directory))
define REGISTER_BIN

.PHONY: cppcheck cppcheck-all

ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1)
cppcheck: cppcheck-$$(notdir $$(basename $(1)))
endif
cppcheck-all: cppcheck-$$(notdir $$(basename $(1)))
$(call COMMON_REGISTER,$(O)/bin/$$(notdir $(1)),$$(notdir $(1)),$$(dir $(1)))
$(O)/$(1): $(O)/bin/$$(notdir $(1))
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@

endef

define REGISTER_BINARY_NOTARGET

$(call COMMON_REGISTER,$(O)/bin/$$(notdir $(1)),$$(notdir $(1)),$$(dir $(1)))
$(O)/$(1): $(O)/bin/$$(notdir $(1))
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@

endef

# Similar, for libraries
define REGISTER_LIB

ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1)$(LIB_SUFFIX)
cppcheck: cppcheck-$$(notdir $$(basename $(1)))
endif
cppcheck-all: cppcheck-$$(notdir $$(basename $(1)))
$(call COMMON_REGISTER,$(O)/lib/$$(notdir $(1)).a,$$(notdir $(1)),$$(dir $(1)))
$(call COMMON_REGISTER,$(O)/lib/$$(notdir $(1)).so,$$(notdir $(1)),$$(dir $(1)))
$(O)/$(1).a: $(O)/lib/$$(notdir $(1)).a
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@
$(O)/$(1).so: $(O)/lib/$$(notdir $(1)).so
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@

endef

# Similar, for documentation
define REGISTER_DOC

ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1).html
endif
$(O)/docs/$$(notdir $(1)).html: $(S)/$$(addsuffix .txt,$(1))
$(O)/$(1).html: $(O)/docs/$$(notdir $(1)).html
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@

endef

# For lua
define REGISTER_LUA

ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS_LUA += $(O)/lua_lib/$(notdir $(1)).luac
endif
$(O)/lua_lib/$$(notdir $(1)).luac: $(S)/$$(addsuffix .lua,$(1))
endef

define REGISTER_SCRIPT

ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1)
endif

$(O)/$(1): $(O)/bin/$$(notdir $(1))
	$(M) LN $$@
	$(Q)mkdir -p $$(dir $(O)/$(1))
	$(Q)ln -sf $$(abspath $$<) $$@

$(O)/bin/$$(notdir $(1)): $(S)/$$(dir $(1))/$$($$(notdir $(1))_SOURCE)
	$(M) LN $$@
	$(Q)mkdir -p $(O)/bin/
	$(Q)ln -sf $$(abspath $$<) $$@

endef

# Generic rules to compile and link
$(O)/.objs/%.o: $(S)/%.$(LANG_MODE)
	$(M) $(COMPILER) $@
	$(Q)mkdir -p $(dir $@ $(subst .objs/,.deps/,$@))
	$(Q)$($(COMPILER)) $($(FLAGS)FLAGS_ALL) -c $< -o $@ -MD -MF $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@))
	$(Q)$(S)/build/normalize_dep_file.pl $(O) $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@)) >$(patsubst %.o,%.d,$(subst .objs/,.deps/,$@))

$(O)/.objs/%.o: $(O)/.gen/%.$(LANG_MODE)
	$(M) $(COMPILER) $@
	$(Q)mkdir -p $(dir $@ $(subst .objs/,.deps/,$@))
	$(Q)$($(COMPILER)) $($(FLAGS)FLAGS_ALL) -c $< -o $@ -MD -MF $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@))
	$(Q)$(S)/build/normalize_dep_file.pl $(O) $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@)) >$(patsubst %.o,%.d,$(subst .objs/,.deps/,$@))

# Make sure the intermediate file is not deleted and more building is triggered
.PRECIOUS: $(O)/.gen/%.embed.$(LANG_MODE)

$(O)/.gen/%.embed.$(LANG_MODE): $(O)/.gen/%.embedlist
	$(M) EMBED $@
	$(Q)mkdir -p $(dir $@ $(subst .gen/,.deps/,$@))
	$(Q)$(S)/build/embed_gen.pl -i $< -o $@ -d $(patsubst %.$(LANG_MODE),%.pre,$(subst .gen/,.deps/,$@))
	$(Q)$(S)/build/normalize_dep_file.pl $(abspath $(O)) $(patsubst %.$(LANG_MODE),%.pre,$(subst .gen/,.deps/,$@)) >$(patsubst %.$(LANG_MODE),%.d,$(subst .gen/,.deps/,$@))

$(O)/.gen/%.embed.$(LANG_MODE): $(S)/%.embedlist
	$(M) EMBED $@
	$(Q)mkdir -p $(dir $@ $(subst .gen/,.deps/,$@))
	$(Q)$(S)/build/embed_gen.pl -i $< -o $@ -d $(patsubst %.$(LANG_MODE),%.pre,$(subst .gen/,.deps/,$@))
	$(Q)$(S)/build/normalize_dep_file.pl $(abspath $(O)) $(patsubst %.$(LANG_MODE),%.pre,$(subst .gen/,.deps/,$@)) >$(patsubst %.$(LANG_MODE),%.d,$(subst .gen/,.deps/,$@))

$(O)/bin/%:
	$(M) LD $@
	$(Q)mkdir -p $(dir $@)
	$(Q)$($(COMPILER)) $(filter %.o,$^) -o $@ $(LDFLAGS_ALL) $(LINK_LIBRARIES)

$(O)/lib/%.a:
	$(M) AR $@
	$(Q)mkdir -p $(dir $@)
	$(Q)$(AR) -rc $@ $(filter %.o,$^)

$(O)/lib/%.so: CFLAGS_ALL += -fPIC
$(O)/lib/%.so: CXXFLAGS_ALL += -fPIC
$(O)/lib/%.so:
	$(M) LD $@
	$(Q)mkdir -p $(dir $@)
	$(Q)$($(COMPILER)) -o $@ $(filter %.o,$^) $(LDFLAGS_ALL) $(LINK_SO_LIBRARIES) -shared

$(O)/docs/%:
	$(M) DOC-HTML $@
	$(Q)mkdir -p $(dir $@)
	$(Q)$(ASCIIDOC) -o $@ $<

$(O)/lua_lib/%:
	$(M) LUAC $@
	$(Q)mkdir -p $(dir $@)
	$(Q)$(LUAC) -o $@ $<

# An empty target without any prereqs. This one is „remade“ every time, triggering
# anything that depends on it, just like .PHONY. Except that it works well with
# generic/static rules.
FORCE:

cppcheck-%: FORCE
	$(M) CCPC $@
	$(Q)cppcheck --enable=style --enable=warning --std=$(subst gnu,c,$(STANDARD)) --suppress=allocaCalled --suppress=obsoleteFunctionsalloca --template='{file}:{line},{severity},{id},{message}' --inline-suppr --error-exitcode=1 -q $(filter-out FORCE,$^)
